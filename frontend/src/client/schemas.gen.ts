// This file is auto-generated by @hey-api/openapi-ts

export const AnswerSchema = {
    properties: {
        answer: {
            type: 'string',
            title: 'Answer'
        },
        documents: {
            items: {
                '$ref': '#/components/schemas/Document'
            },
            type: 'array',
            title: 'Documents'
        }
    },
    type: 'object',
    required: ['answer', 'documents'],
    title: 'Answer'
} as const;

export const Body_upload_file_upload_file_postSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_upload_file_upload_file_post'
} as const;

export const BookFormatsSchema = {
    properties: {
        'application/epub+zip': {
            type: 'string',
            minLength: 1,
            format: 'uri',
            title: 'Application/Epub+Zip'
        },
        'image/jpeg': {
            type: 'string',
            minLength: 1,
            format: 'uri',
            title: 'Image/Jpeg'
        }
    },
    type: 'object',
    required: ['application/epub+zip', 'image/jpeg'],
    title: 'BookFormats'
} as const;

export const BookImportRequestSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        formats: {
            '$ref': '#/components/schemas/BookFormats'
        },
        authors: {
            items: {
                '$ref': '#/components/schemas/Person'
            },
            type: 'array',
            title: 'Authors',
            default: []
        },
        translators: {
            items: {
                '$ref': '#/components/schemas/Person'
            },
            type: 'array',
            title: 'Translators',
            default: []
        },
        languages: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Languages',
            default: []
        },
        subjects: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subjects'
        },
        gutenberg_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gutenberg Id'
        }
    },
    type: 'object',
    required: ['title', 'formats'],
    title: 'BookImportRequest'
} as const;

export const DocumentSchema = {
    properties: {
        content: {
            type: 'string',
            title: 'Content'
        },
        position: {
            type: 'string',
            title: 'Position'
        }
    },
    type: 'object',
    required: ['content', 'position'],
    title: 'Document'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const ImportedBookSchema = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        formats: {
            '$ref': '#/components/schemas/BookFormats'
        },
        authors: {
            items: {
                '$ref': '#/components/schemas/Person'
            },
            type: 'array',
            title: 'Authors',
            default: []
        },
        translators: {
            items: {
                '$ref': '#/components/schemas/Person'
            },
            type: 'array',
            title: 'Translators',
            default: []
        },
        languages: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Languages',
            default: []
        },
        subjects: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subjects'
        },
        gutenberg_id: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Gutenberg Id'
        },
        epub_path: {
            anyOf: [
                {
                    type: 'string',
                    format: 'file-path'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Epub Path'
        },
        cover_path: {
            anyOf: [
                {
                    type: 'string',
                    format: 'file-path'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cover Path'
        },
        uuid: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Uuid'
        }
    },
    type: 'object',
    required: ['title', 'formats'],
    title: 'ImportedBook'
} as const;

export const PersonSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        birth_year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birth Year'
        },
        death_year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Death Year'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Person'
} as const;

export const QuestionSchema = {
    properties: {
        question: {
            type: 'string',
            title: 'Question'
        },
        book: {
            type: 'string',
            title: 'Book'
        },
        percentage: {
            type: 'integer',
            title: 'Percentage',
            default: 100
        }
    },
    type: 'object',
    required: ['question', 'book'],
    title: 'Question'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;